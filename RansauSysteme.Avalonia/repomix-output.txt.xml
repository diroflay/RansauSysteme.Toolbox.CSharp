This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: RansauSysteme.Avalonia.csproj, WebView
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
RansauSysteme.Avalonia.csproj
WebView/AssemblyInfo.cs
WebView/Cookies/IWebViewCookieManager.cs
WebView/Cookies/WebViewCookie.cs
WebView/EventArgs/MessageReceivedEventArgs.cs
WebView/EventArgs/NavigationCompletedEventArgs.cs
WebView/EventArgs/NavigationStartingEventArgs.cs
WebView/Factory/NativeWebViewHostFactory.cs
WebView/NativeWebViewHost.cs
WebView/WebView.axaml
WebView/WebView.axaml.cs
WebView/Windows/WindowsWebViewHost.cs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="RansauSysteme.Avalonia.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Version>1.0.0</Version>
    <Company>RANSAU SYSTEME</Company>
    <Authors>RANSAU SYSTEME</Authors>
    <PackageIcon>systeme-icon-square.PNG</PackageIcon>
    <Description>A modern WebView control for Avalonia UI applications that integrates Microsoft's WebView2 component, providing a powerful web rendering experience in your desktop applications.
Features

Modern web rendering using Microsoft Edge WebView2 engine
MVVM-friendly with full command support
JavaScript execution and interop capabilities
CSS injection support
Navigation events and commands
DevTools integration for debugging
Proper XAML integration with control templates
Two-way binding support for Source property

This package is built to seamlessly integrate with Avalonia applications using MVVM architecture. 
Simply add the control to your XAML and bind to your view model for complete web browsing capabilities in your Avalonia applications.


Requirements

- Windows OS (currently Windows-only implementation)
- Microsoft Edge WebView2 Runtime installed
- .NET 9.0 or higher
- Avalonia 11.0 or higher

Installation
dotnet add package RansauSysteme.Avalonia.WebView
</Description>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\systeme-icon-square.PNG">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.2.8" />
    <PackageReference Include="Microsoft.Web.WebView2" Version="[1.0.902.49]" />
  </ItemGroup>

  <ItemGroup>
    <None Update="README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

</Project>
</file>

<file path="WebView/AssemblyInfo.cs">
using Avalonia.Metadata;

[assembly: XmlnsDefinition("https://ransausysteme.com/webview", "RansauSysteme.Avalonia.WebView")]
[assembly: XmlnsPrefix("https://ransausysteme.com/webview", "webview")]
</file>

<file path="WebView/Cookies/IWebViewCookieManager.cs">
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Defines methods for managing cookies in a WebView control.
    /// </summary>
    public interface IWebViewCookieManager
    {
        /// <summary>
        /// Gets a value indicating whether the WebView implementation supports cookie management.
        /// </summary>
        bool SupportsCookies { get; }

        /// <summary>
        /// Adds a cookie to the WebView.
        /// </summary>
        /// <param name="cookie">The cookie to add.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task AddCookieAsync(WebViewCookie cookie);

        /// <summary>
        /// Gets all cookies for the specified URL.
        /// </summary>
        /// <param name="url">The URL to get cookies for.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the cookies.</returns>
        Task<List<WebViewCookie>> GetCookiesAsync(string url);

        /// <summary>
        /// Removes a cookie from the WebView.
        /// </summary>
        /// <param name="cookie">The cookie to remove.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task RemoveCookieAsync(WebViewCookie cookie);

        /// <summary>
        /// Clears all cookies from the WebView.
        /// </summary>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task ClearCookiesAsync();
    }
}
</file>

<file path="WebView/Cookies/WebViewCookie.cs">
namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Represents a cookie used by the WebView control.
    /// </summary>
    public class WebViewCookie
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebViewCookie"/> class.
        /// </summary>
        /// <param name="name">The name of the cookie.</param>
        /// <param name="value">The value of the cookie.</param>
        /// <param name="domain">The domain of the cookie.</param>
        /// <param name="path">The path of the cookie.</param>
        public WebViewCookie(string name, string value, string domain, string path)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentNullException(nameof(name));

            if (string.IsNullOrEmpty(domain))
                throw new ArgumentNullException(nameof(domain));

            Name = name;
            Value = value ?? string.Empty;
            Domain = domain;
            Path = path ?? "/";
        }

        /// <summary>
        /// Gets the name of the cookie.
        /// </summary>
        public string Name { get; }

        /// <summary>
        /// Gets the value of the cookie.
        /// </summary>
        public string Value { get; }

        /// <summary>
        /// Gets the domain of the cookie.
        /// </summary>
        public string Domain { get; }

        /// <summary>
        /// Gets the path of the cookie.
        /// </summary>
        public string Path { get; }
    }
}
</file>

<file path="WebView/EventArgs/MessageReceivedEventArgs.cs">
namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Event arguments for WebView message received events.
    /// </summary>
    public class MessageReceivedEventArgs : EventArgs
    {
        /// <summary>
        /// Gets the web message as a string.
        /// </summary>
        public string Message { get; }

        public MessageReceivedEventArgs(string message)
        {
            Message = message;
        }
    }
}
</file>

<file path="WebView/EventArgs/NavigationCompletedEventArgs.cs">
using Microsoft.Web.WebView2.Core;

namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Event arguments for WebView navigation completed events.
    /// </summary>
    public class NavigationCompletedEventArgs : EventArgs
    {
        /// <summary>
        /// Gets a value indicating whether the navigation was successful.
        /// </summary>
        public bool IsSuccess { get; }

        /// <summary>
        /// Gets the WebView2 error status if navigation failed.
        /// </summary>
        public CoreWebView2WebErrorStatus WebErrorStatus { get; }

        public NavigationCompletedEventArgs(bool isSuccess, CoreWebView2WebErrorStatus webErrorStatus)
        {
            IsSuccess = isSuccess;
            WebErrorStatus = webErrorStatus;
        }
    }
}
</file>

<file path="WebView/EventArgs/NavigationStartingEventArgs.cs">
namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Event arguments for WebView navigation starting events.
    /// </summary>
    public class NavigationStartingEventArgs : EventArgs
    {
        /// <summary>
        /// Gets the URI of the navigation.
        /// </summary>
        public string Uri { get; }

        public NavigationStartingEventArgs(string uri)
        {
            Uri = uri;
        }
    }
}
</file>

<file path="WebView/Factory/NativeWebViewHostFactory.cs">
using System.Runtime.InteropServices;
using RansauSysteme.Avalonia.WebView.Windows;

namespace RansauSysteme.Avalonia.WebView
{
    /// <summary>
    /// Factory class for creating WebView instances.
    /// </summary>
    internal static class NativeWebViewHostFactory
    {
        /// <summary>
        /// Creates a new WebView instance if the current platform is supported.
        /// </summary>
        /// <returns>A new WebView instance or null if the platform is not supported.</returns>
        public static NativeWebViewHost Create()
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                return new WindowsWebViewHost();
            }

            throw new InvalidOperationException("Current OS is not supported yet");
        }

        /// <summary>
        /// Creates a new WebView instance if the current platform is supported,
        /// with the specified initial source URL.
        /// </summary>
        /// <param name="source">The initial source URL.</param>
        /// <returns>A new WebView instance or null if the platform is not supported.</returns>
        public static NativeWebViewHost Create(string source)
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                return new WindowsWebViewHost { Source = source };
            }

            throw new InvalidOperationException("Current OS is not supported yet");
        }

        /// <summary>
        /// Checks if WebView2 is supported on the current platform.
        /// </summary>
        /// <returns>True if WebView2 is supported, otherwise false.</returns>
        public static bool IsSupported()
        {
            var supportedPlatforms = new List<OSPlatform> { OSPlatform.Windows };

            return supportedPlatforms.Any(RuntimeInformation.IsOSPlatform);
        }
    }
}
</file>

<file path="WebView/NativeWebViewHost.cs">
using Avalonia.Controls;

namespace RansauSysteme.Avalonia.WebView
{
    internal abstract class NativeWebViewHost : NativeControlHost, IWebViewCookieManager
    {
        #region Properties

        public string Source
        {
            get => _source;
            set
            {
                _source = value;
                OnSourceChanged(value);
            }
        }

        protected string _source = "about:blank";

        public bool IsDevToolsEnabled
        {
            get => _isDevToolsEnabled;
            set
            {
                _isDevToolsEnabled = value;
                OnIsDevToolsEnabledChanged(value);
            }
        }

        protected bool _isDevToolsEnabled;

        #endregion Properties

        #region Events

        public abstract event EventHandler<NavigationCompletedEventArgs>? NavigationCompleted;

        public abstract event EventHandler<NavigationStartingEventArgs>? NavigationStarting;

        public abstract event EventHandler<MessageReceivedEventArgs>? WebMessageReceived;

        public abstract event EventHandler<string>? SourceChanged;

        #endregion Events

        #region Public Methods

        public abstract void OnSourceChanged(string newSource);

        public abstract void OnIsDevToolsEnabledChanged(bool enabled);

        /// <summary>
        /// Executes JavaScript in the WebView asynchronously.
        /// </summary>
        /// <param name="script">JavaScript code to execute</param>
        /// <returns>A task that completes with the result of the script execution</returns>
        public abstract Task<string> ExecuteScriptAsync(string script);

        /// <summary>
        /// Registers a JavaScript callback function that can be called from JavaScript.
        /// </summary>
        /// <param name="functionName">Name of the JavaScript function</param>
        /// <param name="callback">The callback to invoke when the JavaScript function is called</param>
        public abstract void AddWebMessageReceived(string functionName, Action<string> callback);

        /// <summary>
        /// Injects JavaScript code into the WebView that exposes a function in the global scope.
        /// </summary>
        /// <param name="functionName">Name of the JavaScript function</param>
        /// <returns>A task that completes when the JavaScript is injected</returns>
        public abstract Task ExposeJavaScriptFunction(string functionName);

        #endregion Public Methods

        #region IWebViewCookieManager implementation

        /// <summary>
        /// Gets a value indicating whether the WebView implementation supports cookie management.
        /// </summary>
        public abstract bool SupportsCookies { get; }

        /// <summary>
        /// Adds a cookie to the WebView.
        /// </summary>
        /// <param name="cookie">The cookie to add.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public abstract Task AddCookieAsync(WebViewCookie cookie);

        /// <summary>
        /// Gets all cookies for the specified URL.
        /// </summary>
        /// <param name="url">The URL to get cookies for.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the cookies.</returns>
        public abstract Task<List<WebViewCookie>> GetCookiesAsync(string url);

        /// <summary>
        /// Removes a cookie from the WebView.
        /// </summary>
        /// <param name="cookie">The cookie to remove.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public abstract Task RemoveCookieAsync(WebViewCookie cookie);

        /// <summary>
        /// Clears all cookies from the WebView.
        /// </summary>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public abstract Task ClearCookiesAsync();

        #endregion IWebViewCookieManager implementation

        #region Navigation

        // Add to NativeWebViewHost.cs in the #region Public Methods section
        /// <summary>
        /// Navigates back to the previous page if possible.
        /// </summary>
        /// <returns>True if successfully navigated back, false otherwise.</returns>
        public abstract bool GoBack();

        /// <summary>
        /// Navigates forward to the next page if possible.
        /// </summary>
        /// <returns>True if successfully navigated forward, false otherwise.</returns>
        public abstract bool GoForward();

        /// <summary>
        /// Stops the current navigation.
        /// </summary>
        /// <returns>True if successfully stopped, false otherwise.</returns>
        public abstract bool Stop();

        /// <summary>
        /// Reloads the current page.
        /// </summary>
        /// <returns>True if successfully started reloading, false otherwise.</returns>
        public abstract bool Reload();

        /// <summary>
        /// Gets a value indicating whether navigation to a previous page is possible.
        /// </summary>
        public abstract bool CanGoBack { get; }

        /// <summary>
        /// Gets a value indicating whether navigation to a next page is possible.
        /// </summary>
        public abstract bool CanGoForward { get; }

        #endregion Navigation
    }
}
</file>

<file path="WebView/WebView.axaml">
<Style xmlns="https://github.com/avaloniaui"
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
       xmlns:controls="using:RansauSysteme.Avalonia.WebView">

	<Style Selector="controls|WebView">
		<Setter Property="Template">
			<ControlTemplate>
				<Border Name="PART_Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{TemplateBinding CornerRadius}">
					<ContentPresenter Name="PART_ContentPresenter" />
				</Border>
			</ControlTemplate>
		</Setter>
	</Style>
</Style>
</file>

<file path="WebView/WebView.axaml.cs">
using System.Windows.Input;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.Presenters;
using Avalonia.Controls.Primitives;
using Avalonia.Data;
using Avalonia.Reactive;

namespace RansauSysteme.Avalonia.WebView;

public class WebView : TemplatedControl, IWebViewCookieManager
{
    private readonly NativeWebViewHost _nativeHost;

    public WebView()
    {
        _nativeHost = NativeWebViewHostFactory.Create();

        this.GetObservable(SourceProperty).Subscribe(new AnonymousObserver<string>(_nativeHost.OnSourceChanged));
        this.GetObservable(IsDevToolsEnabledProperty).Subscribe(new AnonymousObserver<bool>(_nativeHost.OnIsDevToolsEnabledChanged));
    }

    protected override void OnApplyTemplate(TemplateAppliedEventArgs e)
    {
        base.OnApplyTemplate(e);

        // Create and add the native host
        _nativeHost.Source = Source;
        _nativeHost.IsDevToolsEnabled = IsDevToolsEnabled;

        // Wire up events
        _nativeHost.NavigationStarting += (s, args) =>
        {
            if (NavigationStartingCommand?.CanExecute(args) == true)
                NavigationStartingCommand.Execute(args);
        };

        _nativeHost.NavigationCompleted += (s, args) =>
        {
            if (NavigationCompletedCommand?.CanExecute(args) == true)
                NavigationCompletedCommand.Execute(args);
        };

        _nativeHost.WebMessageReceived += (s, args) =>
        {
            if (WebMessageReceivedCommand?.CanExecute(args) == true)
                WebMessageReceivedCommand.Execute(args);
        };

        _nativeHost.SourceChanged += (s, newSource) =>
        {
            if (Source != newSource)
            {
                SetCurrentValue(SourceProperty, newSource);
            }
        };

        // Add to visual tree
        var contentPresenter = e.NameScope.Find<ContentPresenter>("PART_ContentPresenter");
        if (contentPresenter != null)
        {
            contentPresenter.Content = _nativeHost;
        }
    }

    #region Dependency Properties

    public static readonly StyledProperty<string> SourceProperty =
            AvaloniaProperty.Register<WebView, string>(nameof(Source), "about:blank", defaultBindingMode: BindingMode.TwoWay);

    public static readonly StyledProperty<bool> IsDevToolsEnabledProperty =
            AvaloniaProperty.Register<WebView, bool>(nameof(IsDevToolsEnabled), false);

    public static readonly StyledProperty<ICommand> NavigationStartingCommandProperty =
            AvaloniaProperty.Register<WebView, ICommand>(nameof(NavigationStartingCommand));

    public static readonly StyledProperty<ICommand> NavigationCompletedCommandProperty =
            AvaloniaProperty.Register<WebView, ICommand>(nameof(NavigationCompletedCommand));

    public static readonly StyledProperty<ICommand> WebMessageReceivedCommandProperty =
            AvaloniaProperty.Register<WebView, ICommand>(nameof(WebMessageReceivedCommand));

    public string Source
    {
        get => GetValue(SourceProperty);
        set => SetValue(SourceProperty, value);
    }

    public bool IsDevToolsEnabled
    {
        get => GetValue(IsDevToolsEnabledProperty);
        set => SetValue(IsDevToolsEnabledProperty, value);
    }

    public ICommand NavigationStartingCommand
    {
        get => GetValue(NavigationStartingCommandProperty);
        set => SetValue(NavigationStartingCommandProperty, value);
    }

    public ICommand NavigationCompletedCommand
    {
        get => GetValue(NavigationCompletedCommandProperty);
        set => SetValue(NavigationCompletedCommandProperty, value);
    }

    public ICommand WebMessageReceivedCommand
    {
        get => GetValue(WebMessageReceivedCommandProperty);
        set => SetValue(WebMessageReceivedCommandProperty, value);
    }

    #endregion Dependency Properties

    #region Public Methods

    /// <summary>
    /// Executes JavaScript in the WebView asynchronously.
    /// </summary>
    /// <param name="script">JavaScript code to execute</param>
    /// <returns>A task that completes with the result of the script execution</returns>
    public async Task<string> ExecuteScriptAsync(string script)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return await _nativeHost.ExecuteScriptAsync(script);
    }

    /// <summary>
    /// Registers a JavaScript callback function that can be called from JavaScript.
    /// </summary>
    /// <param name="functionName">Name of the JavaScript function</param>
    /// <param name="callback">The callback to invoke when the JavaScript function is called</param>
    public void AddWebMessageReceived(string functionName, Action<string> callback)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        _nativeHost.AddWebMessageReceived(functionName, callback);
    }

    /// <summary>
    /// Injects JavaScript code into the WebView that exposes a function in the global scope.
    /// </summary>
    /// <param name="functionName">Name of the JavaScript function</param>
    /// <returns>A task that completes when the JavaScript is injected</returns>
    public async Task ExposeJavaScriptFunction(string functionName)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        await _nativeHost.ExposeJavaScriptFunction(functionName);
    }

    /// <summary>
    /// Injects a CSS stylesheet into the current page.
    /// </summary>
    /// <param name="cssContent">The CSS content to inject</param>
    /// <returns>A task that completes when the CSS is injected</returns>
    public async Task InjectCssAsync(string cssContent)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        // Escape single quotes in CSS content
        cssContent = cssContent.Replace("'", "\\'");

        // Create a script to inject the CSS
        string script = @"
                (function() {
                    const style = document.createElement('style');
                    style.textContent = '" + cssContent + @"';
                    document.head.appendChild(style);
                })();
            ";

        await _nativeHost.ExecuteScriptAsync(script);
    }

    #endregion Public Methods

    #region Navigation Methods

    /// <summary>
    /// Sets the WebView to navigate to the specified URL.
    /// </summary>
    /// <param name="url">The URL to navigate to</param>
    public void NavigateTo(string url)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        Source = url;
    }

    /// <summary>
    /// Gets a value indicating whether navigation to a previous page is possible.
    /// </summary>
    public bool CanGoBack => _nativeHost?.CanGoBack ?? false;

    /// <summary>
    /// Gets a value indicating whether navigation to a next page is possible.
    /// </summary>
    public bool CanGoForward => _nativeHost?.CanGoForward ?? false;

    /// <summary>
    /// Navigates back to the previous page if possible.
    /// </summary>
    /// <returns>True if successfully navigated back, false otherwise.</returns>
    public bool GoBack()
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.GoBack();
    }

    /// <summary>
    /// Navigates forward to the next page if possible.
    /// </summary>
    /// <returns>True if successfully navigated forward, false otherwise.</returns>
    public bool GoForward()
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.GoForward();
    }

    /// <summary>
    /// Stops the current navigation.
    /// </summary>
    /// <returns>True if successfully stopped, false otherwise.</returns>
    public bool Stop()
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.Stop();
    }

    /// <summary>
    /// Reloads the current page.
    /// </summary>
    /// <returns>True if successfully started reloading, false otherwise.</returns>
    public bool Reload()
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.Reload();
    }

    #endregion Navigation Methods

    #region IWebViewCookieManager implementation

    /// <summary>
    /// Gets a value indicating whether the WebView implementation supports cookie management.
    /// </summary>
    public bool SupportsCookies => _nativeHost?.SupportsCookies ?? false;

    /// <summary>
    /// Adds a cookie to the WebView.
    /// </summary>
    /// <param name="cookie">The cookie to add.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the WebView is not initialized.</exception>
    public Task AddCookieAsync(WebViewCookie cookie)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.AddCookieAsync(cookie);
    }

    /// <summary>
    /// Gets all cookies for the specified URL.
    /// </summary>
    /// <param name="url">The URL to get cookies for.</param>
    /// <returns>A task that represents the asynchronous operation. The task result contains the cookies.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the WebView is not initialized.</exception>
    public Task<List<WebViewCookie>> GetCookiesAsync(string url)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.GetCookiesAsync(url);
    }

    /// <summary>
    /// Removes a cookie from the WebView.
    /// </summary>
    /// <param name="cookie">The cookie to remove.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the WebView is not initialized.</exception>
    public Task RemoveCookieAsync(WebViewCookie cookie)
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.RemoveCookieAsync(cookie);
    }

    /// <summary>
    /// Clears all cookies from the WebView.
    /// </summary>
    /// <returns>A task that represents the asynchronous operation.</returns>
    /// <exception cref="InvalidOperationException">Thrown if the WebView is not initialized.</exception>
    public Task ClearCookiesAsync()
    {
        if (_nativeHost == null)
            throw new InvalidOperationException("WebView is not initialized.");

        return _nativeHost.ClearCookiesAsync();
    }

    #endregion IWebViewCookieManager implementation
}
</file>

<file path="WebView/Windows/WindowsWebViewHost.cs">
using System.Runtime.InteropServices;
using Avalonia.Controls;
using Avalonia.Platform;
using Avalonia.Threading;
using Microsoft.Web.WebView2.Core;

namespace RansauSysteme.Avalonia.WebView.Windows
{
    internal class WindowsWebViewHost : NativeWebViewHost
    {
        private CoreWebView2Environment? _webView2Environment;
        private CoreWebView2Controller? _webView2Controller;
        private CoreWebView2? _coreWebView2;
        private IntPtr _hwnd;
        private bool _isInitialized;

        public WindowsWebViewHost()
        {
            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                throw new InvalidOperationException("Cannot create Windows WebView control on another platform than Windows");

            bool isWebview2Available = false;
            try
            {
                string? version = CoreWebView2Environment.GetAvailableBrowserVersionString();
                isWebview2Available = !string.IsNullOrEmpty(version);
            }
            catch
            {
                isWebview2Available = false;
            }

            if (!isWebview2Available)
            {
                throw new InvalidOperationException("Microsoft WebView2 have to be installed to run Windows WebView control");
            }
        }

        public override event EventHandler<NavigationCompletedEventArgs>? NavigationCompleted;

        public override event EventHandler<NavigationStartingEventArgs>? NavigationStarting;

        public override event EventHandler<MessageReceivedEventArgs>? WebMessageReceived;

        public override event EventHandler<string>? SourceChanged;

        public override void OnSourceChanged(string newSource)
        {
            if (_isInitialized && _coreWebView2 != null)
            {
                Dispatcher.UIThread.InvokeAsync(() =>
                {
                    _coreWebView2.Navigate(newSource);
                });
            }
        }

        public override void OnIsDevToolsEnabledChanged(bool enabled)
        {
            if (_isInitialized && _coreWebView2 != null)
            {
                _coreWebView2.Settings.AreDevToolsEnabled = enabled;
            }
        }

        public override bool SupportsCookies => _isInitialized && _coreWebView2 != null;

        protected override IPlatformHandle CreateNativeControlCore(IPlatformHandle parent)
        {
            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                throw new PlatformNotSupportedException("WebView2 is only supported on Windows.");

            _hwnd = CreateWindowEx(
                0,
                "Static",
                "",
                WS_CHILD | WS_VISIBLE,
                0, 0,
                (int)Bounds.Width, (int)Bounds.Height,
                parent.Handle,
                IntPtr.Zero,
                IntPtr.Zero,
                IntPtr.Zero);

            Task.Run(async () => await InitializeWebView2());

            return new PlatformHandle(_hwnd, "HWND");
        }

        private async Task InitializeWebView2()
        {
            try
            {
                // Create environment options
                var environmentOptions = new CoreWebView2EnvironmentOptions();

                // Create the WebView2 environment
                _webView2Environment = await CoreWebView2Environment.CreateAsync(null, null, environmentOptions);

                await Dispatcher.UIThread.InvokeAsync(async () =>
                {
                    // Create the CoreWebView2Controller
                    _webView2Controller = await _webView2Environment.CreateCoreWebView2ControllerAsync(_hwnd);

                    // Get the CoreWebView2 from the controller
                    _coreWebView2 = _webView2Controller.CoreWebView2;

                    // Set the bounds to match the Avalonia control
                    _webView2Controller.Bounds = new System.Drawing.Rectangle(
                        0, 0, (int)Bounds.Width, (int)Bounds.Height);

                    // Wire up events
                    _coreWebView2.NavigationStarting += CoreWebView2_NavigationStarting;
                    _coreWebView2.NavigationCompleted += CoreWebView2_NavigationCompleted;
                    _coreWebView2.WebMessageReceived += CoreWebView2_WebMessageReceived;
                    _coreWebView2.SourceChanged += CoreWebView2_SourceChanged;

                    // Configure WebView2 settings
                    _coreWebView2.Settings.AreDevToolsEnabled = IsDevToolsEnabled;
                    _coreWebView2.Settings.IsScriptEnabled = true;
                    _coreWebView2.Settings.AreDefaultScriptDialogsEnabled = true;

                    // Set the initial source
                    _coreWebView2.Navigate(Source);

                    // Make the controller visible
                    _webView2Controller.IsVisible = true;

                    _isInitialized = true;
                });
            }
            catch (Exception ex)
            {
                // Handle initialization errors
                Console.WriteLine($"WebView2 initialization error: {ex.Message}");
            }
        }

        private void CoreWebView2_NavigationStarting(object? sender, CoreWebView2NavigationStartingEventArgs e)
        {
            NavigationStarting?.Invoke(this, new NavigationStartingEventArgs(e.Uri));
        }

        private void CoreWebView2_NavigationCompleted(object? sender, CoreWebView2NavigationCompletedEventArgs e)
        {
            NavigationCompleted?.Invoke(this, new NavigationCompletedEventArgs(e.IsSuccess, e.WebErrorStatus));
        }

        private void CoreWebView2_WebMessageReceived(object? sender, CoreWebView2WebMessageReceivedEventArgs e)
        {
            WebMessageReceived?.Invoke(this, new MessageReceivedEventArgs(e.TryGetWebMessageAsString()));
        }

        private void CoreWebView2_SourceChanged(object? sender, CoreWebView2SourceChangedEventArgs e)
        {
            if (_coreWebView2 != null)
            {
                string newSource = _coreWebView2.Source;
                if (newSource != Source)
                {
                    Source = newSource;
                    SourceChanged?.Invoke(this, newSource);
                }
            }
        }

        protected override void OnSizeChanged(SizeChangedEventArgs e)
        {
            base.OnSizeChanged(e);

            if (_hwnd != IntPtr.Zero)
            {
                SetWindowPos(
                    _hwnd,
                    IntPtr.Zero,
                    0, 0,
                    (int)e.NewSize.Width, (int)e.NewSize.Height,
                    SWP_NOMOVE | SWP_NOZORDER);

                if (_webView2Controller != null)
                {
                    _webView2Controller.Bounds = new System.Drawing.Rectangle(
                        0, 0, (int)e.NewSize.Width, (int)e.NewSize.Height);
                }
            }
        }

        protected override void DestroyNativeControlCore(IPlatformHandle control)
        {
            if (_webView2Controller != null)
            {
                _webView2Controller.Close();
                _webView2Controller = null;
            }

            _coreWebView2 = null;

            if (_hwnd != IntPtr.Zero)
            {
                DestroyWindow(_hwnd);
                _hwnd = IntPtr.Zero;
            }

            _isInitialized = false;
            base.DestroyNativeControlCore(control);
        }

        #region Native Methods

        // Constants for window styles
        private const int WS_CHILD = 0x40000000;

        private const int WS_VISIBLE = 0x10000000;
        private const int SWP_NOMOVE = 0x0002;
        private const int SWP_NOZORDER = 0x0004;

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr CreateWindowEx(
            int dwExStyle,
            string lpClassName,
            string lpWindowName,
            int dwStyle,
            int x, int y,
            int nWidth, int nHeight,
            IntPtr hWndParent,
            IntPtr hMenu,
            IntPtr hInstance,
            IntPtr lpParam);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool DestroyWindow(IntPtr hWnd);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool SetWindowPos(
            IntPtr hWnd,
            IntPtr hWndInsertAfter,
            int X, int Y,
            int cx, int cy,
            uint uFlags);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

        #endregion Native Methods

        #region Public Methods

        /// <summary>
        /// Executes JavaScript in the WebView asynchronously.
        /// </summary>
        /// <param name="script">JavaScript code to execute</param>
        /// <returns>A task that completes with the result of the script execution</returns>
        public override async Task<string> ExecuteScriptAsync(string script)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            return await _coreWebView2.ExecuteScriptAsync(script);
        }

        /// <summary>
        /// Registers a JavaScript callback function that can be called from JavaScript.
        /// </summary>
        /// <param name="functionName">Name of the JavaScript function</param>
        /// <param name="callback">The callback to invoke when the JavaScript function is called</param>
        public override void AddWebMessageReceived(string functionName, Action<string> callback)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            _coreWebView2.WebMessageReceived += (sender, args) =>
            {
                // Parse the message to determine if it's for our function
                string message = args.TryGetWebMessageAsString();

                try
                {
                    // Simple message format: "functionName:message"
                    if (message.StartsWith($"{functionName}:"))
                    {
                        string payload = message.Substring(functionName.Length + 1);
                        callback(payload);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing web message: {ex.Message}");
                }
            };
        }

        /// <summary>
        /// Injects JavaScript code into the WebView that exposes a function in the global scope.
        /// </summary>
        /// <param name="functionName">Name of the JavaScript function</param>
        /// <returns>A task that completes when the JavaScript is injected</returns>
        public override async Task ExposeJavaScriptFunction(string functionName)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            // Create a JavaScript function that will post a message to the WebView
            string script = $@"
                window.{functionName} = function(message) {{
                    window.chrome.webview.postMessage('{functionName}:' + message);
                }};
            ";

            await _coreWebView2.ExecuteScriptAsync(script);
        }

        #endregion Public Methods

        #region Cookie Management

        public override async Task AddCookieAsync(WebViewCookie cookie)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            var cookieManager = _coreWebView2.CookieManager;
            var coreWebView2Cookie = cookieManager.CreateCookie(cookie.Name, cookie.Value, cookie.Domain, cookie.Path);
            await Task.Run(() => cookieManager.AddOrUpdateCookie(coreWebView2Cookie));
        }

        public override async Task<List<WebViewCookie>> GetCookiesAsync(string url)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            var cookieManager = _coreWebView2.CookieManager;
            var cookies = await cookieManager.GetCookiesAsync(url);

            var result = new List<WebViewCookie>();
            foreach (var cookie in cookies)
            {
                result.Add(new WebViewCookie(cookie.Name, cookie.Value, cookie.Domain, cookie.Path));
            }

            return result;
        }

        public override async Task RemoveCookieAsync(WebViewCookie cookie)
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            var cookieManager = _coreWebView2.CookieManager;
            var cookies = await cookieManager.GetCookiesAsync(cookie.Domain);

            foreach (var existingCookie in cookies)
            {
                if (existingCookie.Name == cookie.Name && existingCookie.Path == cookie.Path)
                {
                    cookieManager.DeleteCookie(existingCookie);
                    break;
                }
            }
        }

        public override Task ClearCookiesAsync()
        {
            if (!_isInitialized || _coreWebView2 == null)
                throw new InvalidOperationException("WebView is not initialized.");

            _coreWebView2.CookieManager.DeleteAllCookies();
            return Task.CompletedTask;
        }

        #endregion Cookie Management

        #region Navigation

        public override bool CanGoBack => _isInitialized && _coreWebView2?.CanGoBack == true;

        public override bool CanGoForward => _isInitialized && _coreWebView2?.CanGoForward == true;

        public override bool GoBack()
        {
            if (!_isInitialized || _coreWebView2 == null)
                return false;

            if (!_coreWebView2.CanGoBack)
                return false;

            _coreWebView2.GoBack();
            return true;
        }

        public override bool GoForward()
        {
            if (!_isInitialized || _coreWebView2 == null)
                return false;

            if (!_coreWebView2.CanGoForward)
                return false;

            _coreWebView2.GoForward();
            return true;
        }

        public override bool Stop()
        {
            if (!_isInitialized || _coreWebView2 == null)
                return false;

            _coreWebView2.Stop();
            return true;
        }

        public override bool Reload()
        {
            if (!_isInitialized || _coreWebView2 == null)
                return false;

            _coreWebView2.Reload();
            return true;
        }

        #endregion Navigation
    }
}
</file>

</files>
